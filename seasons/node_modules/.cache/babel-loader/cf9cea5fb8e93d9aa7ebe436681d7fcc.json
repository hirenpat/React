{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hirenpatel/GitHub/React/seasons/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport \"semantic-ui-css/semantic.min.css\";\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => {\n      //We called Setstate!!!\n      this.setState({\n        lat: position.coords.latitude\n      }); //WE CAN NOT DO!!! -->(this.state.lat = position.coords.latitude)\n    }, err => {\n      this.setState({\n        errorMessage: err.message\n      });\n    });\n  }\n\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" Error: \", this.state.errorMessage, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Loading! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 17\n}, this), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/hirenpatel/GitHub/React/seasons/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Spinner","App","Component","state","lat","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","render","document","querySelector"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAQ/BC,KAR+B,GAQvB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,YAAY,EAAE;AAA3B,KARuB;AAAA;;AAU/BC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACEC,QAAQ,IAAI;AACV;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAd,EAFU,CAGV;AACD,KALH,EAMEC,GAAG,IAAI;AACL,WAAKH,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAEU,GAAG,CAACC;AAApB,OAAd;AACD,KARH;AAUD;;AAEDC,EAAAA,MAAM,GAAE;AAEJ,QAAI,KAAKd,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA3C,EAA+C;AAC7C,0BAAO;AAAA,+BAAe,KAAKD,KAAL,CAAWE,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,QAAI,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA3C,EAA+C;AAC7C,0BAAO,QAAC,aAAD;AAAe,QAAA,GAAG,EAAG,KAAKD,KAAL,CAAWC;AAAhC;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAhC8B;;AAmCjCN,QAAQ,CAACmB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport \"semantic-ui-css/semantic.min.css\";\nimport Spinner from './Spinner'\n\nclass App extends React.Component{\n  // constructor(props){\n  //   super(props);\n\n  //   //THIS IS THE ONLY TIME we do direct assignment\n  //   this.state = { lat: null, errorMessage: ''}; \n  // }\n\n  state = { lat: null, errorMessage: ''};\n\n  componentDidMount(){\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        //We called Setstate!!!\n        this.setState({ lat: position.coords.latitude });\n        //WE CAN NOT DO!!! -->(this.state.lat = position.coords.latitude)\n      },\n      err => {\n        this.setState({ errorMessage: err.message});\n      }\n    );\n  }\n\n  render(){\n\n      if (this.state.errorMessage && !this.state.lat){\n        return <div> Error: { this.state.errorMessage } </div>;\n      }\n      if (!this.state.errorMessage && this.state.lat){\n        return <SeasonDisplay lat={ this.state.lat } />\n      }\n      return <div> Loading! </div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"]},"metadata":{},"sourceType":"module"}